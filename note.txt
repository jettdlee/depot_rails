s

String Literal
single-quoted case - Ruby does very little, what you type into the single-quoted string literal becomes the string’s value.
double-quoted case - looks for substitutions sequences that start with a backslash character and replaces them with some binary value. \n, which is replaced with a newline character. When you write a string containing a newline to the console, the \n forces a line break.
expression interpolation in double-quoted strings. #{expression} is replaced by the value of expression.
array literal—a set of elements between square brackets
Ruby array indices start at zero

Rails scaffold - auto-generation of a set of a model, views, and a controller usually used for a single database table. scaffold that generates everything that you need (and don't need), models create only some related components


YAML1 is a recursive acronym that stands for YAML Ain’t Markup Language. In the context of Rails, YAML is used as a convenient way to define the configuration of things such as databases, test data, and translations
indentation is important

Marshaling Objects
convert it into a stream of bytes that can be stored outside the application
object can later be read by another instance
copy of the originally saved object can be reconstituted

two potential issues when you use marshalling:
some objects cannot be dumped. If the objects to be dumped include bindings, procedure or method objects, instances of class IO, or singleton objects, or if you try to dump anonymous classes or modules, a TypeError will be raised.
when you load a marshaled object, Ruby needs to know the definition of the class of that object

Rails uses marshaling to store session data.
possible that a particular class may not have been defined at the point it reconstitutes session data
you’ll use the model declaration in your controller to list all models that are marshaled.
This preemptively loads the necessary classes to make marshaling work.

Methods such as empty! and empty?
Ruby method names can end with an exclamation mark (a bang method) or a question mark (a predicate method). Bang methods normally do something destructive to the receiver. 
Predicate methods return true or false depending on some condition.

a || b
The expression a || b evaluates a. 
If it isn’t false or nil, then evaluation stops, and the expression returns a. 
Otherwise, the statement returns b. 
This is a common way of returning a default value if the first value hasn’t been set.

a ||= b
The assignment statement supports a set of shortcuts: a op= b is the same as a = a op b.

obj = self.new
Sometimes a class method needs to create an instance of that class.

lambda
The lambda operator converts a block into an object of type Proc.


require File.expand_path('../../config/environment', __FILE__)
Ruby’s require method loads an external source file into our application.
This is used to include library code and classes that our application relies on.
In normal use, Ruby finds these files by searching in a list of directories, the LOAD_PATH.

use case is simply a statement about how some entity uses a system.




Fixtures - env to run tests
contains YAML

fictures() laods data corresponding to the given model name into the corresponding database before each test method
using :product will call product.yml to be used

this empties the table and populates with row

dev.sql - developement database
test.sqp - test
production.sql - production

concern - tool provided by ActiveSupport for including modules in classes creating mixins.

controller, include - links to concern module to use functions

find_by - streamline where(). returns either line item or nil instead of array

rescue_from - intercepts exception
logger.error - records the error
redirect_to - prevents user from retriggering error

ajax - async javascript and xml

controller x - include module => concern module
include currentcart
before_action - run function

button_to/link_to - remote: true sends AJAX request to the server containing the HTML fragment

format.js - respornd with a format of js, cakks method passing an otional block.
this will look for a template to render wonce function finishes.
this links with a file.js.erb file in the view


setup jquery
jquery-ui-rails - in gem
bundle install
//= require jquery-ui/effects/effect-blind

Helper method - abstract some process our of a view using a helper


CHAPTER 11 F5 p164
important to get name and stream

Action Cable:
1) channel
2) broadcast data
3) receive data

only for localhost
config.action_cable.disable_request_forgery_protection = true


channel/file.coffee

models also stores the array containing fields


atom feeds - take advantage of preexisting clients.
.atom causes rails to look for a template of the functions name

unit testing of models - contains business logic. add product to cart > cart model checks
if product is already in list of items > if so increment quantity, else add new item

functional testing of controllers - controllers direst the show. recieve web requests > 
interact with models to get app state > respond with view to display to user.
when testing controllers, make sure requestes is answered with appropriate response
we need models, but has already covered with unit tests

Test flow of application.
Integration test - simulates a continuous session between one or more virtual users and app.
used to send requrests, monitor responses, follow redirects ...
rails creates the corresponding units or functional tests
Integration, however, are not auto created, but can be generated
integration wanders over the app, so we need to pass a full URL for the controller and action to be invoked



Chapter 15
i18n.rb - internationalization - associates between display names and locale name
html_safe - informs rails the string can be interpreted as html
set translation pack in application controller
within html, convert content with t('.tag')
tag links with .yml file with the same tag


Chapter 17
MODELS
all persistent data retained by the app is managed
five models created: cart, lineitem, order, product, user
default, all models have id, created_at, updated_at attributes.
we added attributes of type string, int, text, decimal, and foreign keys, and a virtual attribute for a password.
has_many/belongs_to relationships used to navigate among our model objects
migrations update the databases to introduce and modify data.
models can be used to actively validate sata, preventinf errors from propagating.
validations for presence, inclusion, numericality, range, uniqueness, format, and confirmation.
custom validation ensures deleted products aren't referenced by any line item.
active record hook ensures admin always remain and used a transaction to roll back incomplete updates on failure.
used logic to add product to cart, add all line itemd from cart to order, encrypt and authenticate password, and compute total
created default sort order for products for display purposes.

VIEW
controls the application presentation to the world.
default, scaffold provides edit, index, new, and show, as wella s partial forms shared between new and edit.
new views were created, admin, sessions, and store.
updated layout to establish a common look of the entire site.
linked stylesheets
used templates to generate javascript, using AJAX and WEBSOCKET for more interactivity.
helper directed when to hide cart from the main view.
localized the customer views for display in english and spanish.
created plain and ATOM views, and for email

CONTROLLER
controllers interacted with the models, from finding and fetching data and putting it into instance variables to update models and saving data entered.
this redirects to action or rendered view in HTML JSON and ATOM.
limited the set of permitted parameters on the line item controller.
created callback actions that were run before selected actions to find the cart, set the language, and authorize requrets.
logic common to a number of concerns
managed sessions, tracking logged users and carts.
tracked current locale used for internationalization
captured errors, logged, and informed users.
emplyed fragmet caching on storefront and page-level caching
sent confirmation emails

CONFIGURATION
conventions keep to a minimum the iamount of configuration required.
modified database configurations.
defined routes for resources, admin, and session controllers, and the root of the site.
defined who_bought of our products resources to access atom feeds
created initializers for i18n putposes and updated locales information for both en and es.
created seed data
created Capistrano script for deplyment, including the definition of a few custom tasks

TESTING
maintained and enhanced test throughout
emplyed unit tests to validation methods
also tested increasing quantity
rails provided basic tests for all units.
tests added fro AJAX and ensuring cart has items.
used fixtures to provide test data to fuel test.
created integration test to end-to-end senarios.


CHAPTER 18
Rails assumes certain runtime directory layout and provides applications and scaffold generators.
rails_app
app - model, view, controller
bin - wrapper scripts
config - configuration and database connection parameters
config.ru - Rack server configuration. configures the Rack Webserver Interafce, to create Metal applciations or use 
Rack middle wares in the rails app. 
db - schema and migration information
gemfile - specifies gem dependencies. also includes the database, web server, and scripts used for deployment.
this is used by the bundler in the config/applications and boot files
gemfile.lock - records versions for the rails applicaitons dependencies. maintained by bundler
lib - shared code
log - log fiels producted by the application
public - web-accessable directory. application runs form here
rakefile - builds script and defines tasks to run test, create documentation, extract the structure of the schema.
Type rake -T prompt for full list. rake -D shows complete description.
readme.md - installation and usage information
test - unit, functional, and integration tests, fixtures, and mocks
tmp - runtime temporary files
vendor - imported code


LIBARIES PLACE
lib holds application code mot in the model, view, or controller.
these are sent directly from the controller to the browser.
you can also place code shared among models, view, or controllers.
